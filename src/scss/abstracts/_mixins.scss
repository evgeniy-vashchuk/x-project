// MIXINS

// Placeholder stylization ------------------------------------
@mixin placeholder {
	&::-webkit-input-placeholder {
		@content;
	}

	&::-moz-placeholder {
		opacity: 1;
		@content;
	}

	&:-moz-placeholder {
		@content;
	}

	&:-ms-input-placeholder {
		@content;
	}
}

// EXAMPLE: @include placeholder {color: red};

// Smooth changing the transparency of the placeholder at the focus ------------------------------------
@mixin placeholder-opacity($time) {
	&::-webkit-input-placeholder       { opacity: 1; transition: opacity $time ease; }
	&::-moz-placeholder                { opacity: 1; transition: opacity $time ease; }
	&:-moz-placeholder                 { opacity: 1; transition: opacity $time ease; }
	&:-ms-input-placeholder            { opacity: 1; transition: opacity $time ease; }
	&:focus::-webkit-input-placeholder { opacity: 0; transition: opacity $time ease; }
	&:focus::-moz-placeholder          { opacity: 0; transition: opacity $time ease; }
	&:focus:-moz-placeholder           { opacity: 0; transition: opacity $time ease; }
	&:focus:-ms-input-placeholder      { opacity: 0; transition: opacity $time ease; }
}

// EXAMPLE: @include placeholder-opacity(0.5s);

// Shifting the placeholder to the right with focus ------------------------------------
@mixin placeholder-animation($indent, $time) {
	&::-webkit-input-placeholder       { text-indent: 0;   transition: text-indent $time ease; }
	&::-moz-placeholder                { text-indent: 0;   transition: text-indent $time ease; }
	&:-moz-placeholder                 { text-indent: 0;   transition: text-indent $time ease; }
	&:-ms-input-placeholder            { text-indent: 0;   transition: text-indent $time ease; }
	&:focus::-webkit-input-placeholder { text-indent: $indent; transition: text-indent $time ease; }
	&:focus::-moz-placeholder          { text-indent: $indent; transition: text-indent $time ease; }
	&:focus:-moz-placeholder           { text-indent: $indent; transition: text-indent $time ease; }
	&:focus:-ms-input-placeholder      { text-indent: $indent; transition: text-indent $time ease; }
}

// EXAMPLE: @include placeholder-animation(500px, 0.5s);

// Ð¡reation border-arrows ------------------------------------
@mixin border-arrow($width, $height, $bg, $direction) {
	width: 0;
	height: 0;
	border-style: solid;
	@if $direction == t {
		border-width: 0 $width / 2 + px $height + px $width / 2 + px;
		border-color: transparent transparent $bg transparent;
	}
	@if $direction == r {
		border-width: $height / 2 + px 0 $height / 2 + px $width + px;
		border-color: transparent transparent transparent $bg;
	}
	@if $direction == b {
		border-width: $height + px $width / 2 + px 0 $width / 2 + px;
		border-color: $bg transparent transparent transparent;
	}
	@if $direction == l {
		border-width: $height / 2 + px $width + px $height / 2 + px 0;
		border-color: transparent $bg transparent transparent;
	}
	@if $direction == tl {
		border-width: $height + px $width + px 0 0;
		border-color: $bg transparent transparent transparent;
	}
	@if $direction == tr {
		border-width: 0 $width + px $height + px 0;
		border-color: transparent $bg transparent transparent;
	}
	@if $direction == br {
		border-width: 0 0 $height + px $width + px;
		border-color: transparent transparent $bg transparent;
	}
	@if $direction == bl {
		border-width: $height + px 0 0 $width + px;
		border-color: transparent transparent transparent $bg;
	}
}

// EXAMPLE: @include border-arrow(20, 20, #FF0000, t);

// Adding fonts ------------------------------------
@mixin font-face($font-family, $file-path, $weight: normal, $style: normal, $asset-pipeline: false ) {
	@font-face {
		font-family: $font-family;
		font-weight: $weight;
		font-style: $style;
		@if $asset-pipeline == true {
			src: font-url('#{$file-path}.eot');
			src: font-url('#{$file-path}.eot?#iefix') format('embedded-opentype'), font-url('#{$file-path}.woff2') format('woff2'), font-url('#{$file-path}.woff') format('woff'), font-url('#{$file-path}.ttf') format('truetype');
		}
		@else {
			src: url('#{$file-path}.eot');
			src: url('#{$file-path}.eot?#iefix') format('embedded-opentype'), url('#{$file-path}.woff2') format('woff2'), url('#{$file-path}.woff') format('woff'), url('#{$file-path}.ttf') format('truetype');
		}
	}
}

// EXAMPLE: 

// @include font-face("Roboto", "../fonts/Roboto/Roboto-Regular", 400);
// @include font-face("Roboto", "../fonts/Roboto/Roboto-Italic", 400, italic);
// @include font-face("Roboto", "../fonts/Roboto/Roboto-Bold", 700);

// Cover background image ------------------------------------
@mixin bgCover() {
	background-size: cover;
	background-repeat: no-repeat;
	background-position: center;
}

// EXAMPLE: @include bgCover;

// Flex center alignment ------------------------------------
@mixin flexCenter() {
	display: flex;
	align-items: center;
	justify-content: center;
}

// EXAMPLE: @include flexCenter;

// Position absolute center alignment ------------------------------------
@mixin absoluteCenter($position) {
	position: absolute;

	@if $position == "v" {
		top: 50%;
		transform: translateY(-50%);
	} @else if $position == "h" {
		left: 50%;
		transform: translate(-50%);
	} @else {
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
	}
}

// EXAMPLE: @include absoluteCenter;

// Absolute cover ------------------------------------
@mixin absoluteCover() {
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	width: 100%;
	height: 100%;
}

// EXAMPLE: @include absoluteCover;

// Responsive images ------------------------------------
@mixin img-res {
	max-width: 100%;
	height: auto;
}

// EXAMPLE: @include img-res;

// Gray image ------------------------------------
@mixin gray {
	filter: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='grayscale'><feColorMatrix type='matrix' values='0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0'/></filter></svg>#grayscale");
	filter: gray;
	-webkit-filter: grayscale(100%);
	filter: progid:DXImageTransform.Microsoft.BasicImage(grayScale=1);
	-ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(grayScale=1)";
}

// EXAMPLE: @include gray;

// Gray none ------------------------------------
@mixin gray-zero {
	filter: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='grayscale'><feColorMatrix type='matrix' values='1 0 0 0 0, 0 1 0 0 0, 0 0 1 0 0, 0 0 0 1 0'/></filter></svg>#grayscale");
	-webkit-filter: grayscale(0%);
}

// EXAMPLE: @include gray-zero;

// Media queries for max width ------------------------------------
@mixin max-w($breakpoint) {
	@if map-has-key($grid-breakpoints, $breakpoint) {
		@media only screen and (max-width: #{map-get($grid-breakpoints, $breakpoint) - 1px}) {
			@content;
		}
	}

	@else {
		@media only screen and (max-width: $breakpoint + "px") {
			@content;
		}
	}
}

// EXAMPLE: @include max-w(md) {font-size: 50px;}

// Media queries for min width ------------------------------------
@mixin min-w($breakpoint) {
	@if map-has-key($grid-breakpoints, $breakpoint) {
		@media only screen and (min-width: #{map-get($grid-breakpoints, $breakpoint)}) {
			@content;
		}
	}

	@else {
		@media only screen and (min-width: $breakpoint + "px") {
			@content;
		}
	}
}

// EXAMPLE: @include min-w(md) {font-size: 50px;}

// Media queries for max height ------------------------------------
@mixin max-h($height) {
	@media only screen and (max-height: $height + "px") {
		@content;
	}
}

// EXAMPLE: @include max-h(800) {font-size: 50px;}

// Media queries for min height ------------------------------------
@mixin min-h($height) {
	@media only screen and (min-height: $height + "px") {
		@content;
	}
}

// EXAMPLE: @include min-h(800) {font-size: 50px;}

// Keyframes animation with delay between iterations ------------------------------------
@mixin waitAnimate($options: ()) {

	$options: map-merge((
		animationName: waitAnimate,
		duration: 1,
		waitTime: 0,
		timingFunction: linear,
		iterationCount: infinite
	), $options);

	$name: map-get($options, animationName);
	$kf: map-get($options, keyframes);
	$kfLength: length($kf);
	$duration: map-get($options, duration);
	$waitTime: map-get($options, waitTime);
	$timingFunction: map-get($options, timingFunction);
	$iterationCount: map-get($options, iterationCount);
	$counter: 1; // index of 'each'

	@keyframes #{$name} {
		@each $frame, $prop in $kf {
			#{$frame * $duration / ($duration + $waitTime)}% {
				@each $k, $v in $prop {
					#{$k}: #{$v}
				}
			}
			// if last in loop and waitTime is not 0, add the last frame as 100% (this is what creates the pause)
			@if $counter == $kfLength and $waitTime > 0 {
				100% {
					@each $k, $v in $prop {
						#{$k}: #{$v}
					}
				}
			}
			$counter: $counter+1;
		}
	}

	.#{$name} {
		animation: #{$name} #{$duration + $waitTime}s #{$timingFunction} #{$iterationCount};
	}
}

// EXAMPLE:

//@include waitAnimate(
//	(
//		animationName: animName,
//		keyframes: (
//			0: (
//				transform: scale(1),
//				background-color: blue
//			),
//			50: (
//				transform: scale(2),
//				background-color: green
//			),
//			100: (
//				transform: scale(3),
//				background-color: red
//			)
//		),
//		duration: 2,
//		waitTime: 1,
//		timingFunction: ease,
//		iterationCount: infinite
//	)
//);
//
//then add .animName class to your element